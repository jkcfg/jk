// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var __std = __std || {};

/**
 * @constructor
 */
__std.ReadArgs = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {__std.ReadArgs}
 */
__std.ReadArgs.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {__std.ReadArgs=} obj
 * @returns {__std.ReadArgs}
 */
__std.ReadArgs.getRootAsReadArgs = function(bb, obj) {
  return (obj || new __std.ReadArgs).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
__std.ReadArgs.prototype.url = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {number}
 */
__std.ReadArgs.prototype.timeout = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
};

/**
 * @returns {boolean}
 */
__std.ReadArgs.prototype.cancelable = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
__std.ReadArgs.startReadArgs = function(builder) {
  builder.startObject(3);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} urlOffset
 */
__std.ReadArgs.addUrl = function(builder, urlOffset) {
  builder.addFieldOffset(0, urlOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} timeout
 */
__std.ReadArgs.addTimeout = function(builder, timeout) {
  builder.addFieldInt32(1, timeout, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} cancelable
 */
__std.ReadArgs.addCancelable = function(builder, cancelable) {
  builder.addFieldInt8(2, +cancelable, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
__std.ReadArgs.endReadArgs = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for ECMAScript6 Modules
export {__std};
